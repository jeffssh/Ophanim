// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
namespace message {
class ReportMessage;
class ReportMessageDefaultTypeInternal;
extern ReportMessageDefaultTypeInternal _ReportMessage_default_instance_;
}  // namespace message
PROTOBUF_NAMESPACE_OPEN
template<> ::message::ReportMessage* Arena::CreateMaybeMessage<::message::ReportMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace message {

enum ReportMessage_ReportMessageType : int {
  ReportMessage_ReportMessageType_Informational = 0,
  ReportMessage_ReportMessageType_Vulnerability = 1,
  ReportMessage_ReportMessageType_ReportMessage_ReportMessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ReportMessage_ReportMessageType_ReportMessage_ReportMessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ReportMessage_ReportMessageType_IsValid(int value);
constexpr ReportMessage_ReportMessageType ReportMessage_ReportMessageType_ReportMessageType_MIN = ReportMessage_ReportMessageType_Informational;
constexpr ReportMessage_ReportMessageType ReportMessage_ReportMessageType_ReportMessageType_MAX = ReportMessage_ReportMessageType_Vulnerability;
constexpr int ReportMessage_ReportMessageType_ReportMessageType_ARRAYSIZE = ReportMessage_ReportMessageType_ReportMessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReportMessage_ReportMessageType_descriptor();
template<typename T>
inline const std::string& ReportMessage_ReportMessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReportMessage_ReportMessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReportMessage_ReportMessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReportMessage_ReportMessageType_descriptor(), enum_t_value);
}
inline bool ReportMessage_ReportMessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReportMessage_ReportMessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReportMessage_ReportMessageType>(
    ReportMessage_ReportMessageType_descriptor(), name, value);
}
enum ReportMessage_Confidence : int {
  ReportMessage_Confidence_Low = 0,
  ReportMessage_Confidence_Medium = 1,
  ReportMessage_Confidence_High = 2,
  ReportMessage_Confidence_Certain = 3,
  ReportMessage_Confidence_ReportMessage_Confidence_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ReportMessage_Confidence_ReportMessage_Confidence_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ReportMessage_Confidence_IsValid(int value);
constexpr ReportMessage_Confidence ReportMessage_Confidence_Confidence_MIN = ReportMessage_Confidence_Low;
constexpr ReportMessage_Confidence ReportMessage_Confidence_Confidence_MAX = ReportMessage_Confidence_Certain;
constexpr int ReportMessage_Confidence_Confidence_ARRAYSIZE = ReportMessage_Confidence_Confidence_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReportMessage_Confidence_descriptor();
template<typename T>
inline const std::string& ReportMessage_Confidence_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReportMessage_Confidence>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReportMessage_Confidence_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReportMessage_Confidence_descriptor(), enum_t_value);
}
inline bool ReportMessage_Confidence_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReportMessage_Confidence* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReportMessage_Confidence>(
    ReportMessage_Confidence_descriptor(), name, value);
}
// ===================================================================

class ReportMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.ReportMessage) */ {
 public:
  inline ReportMessage() : ReportMessage(nullptr) {}
  virtual ~ReportMessage();

  ReportMessage(const ReportMessage& from);
  ReportMessage(ReportMessage&& from) noexcept
    : ReportMessage() {
    *this = ::std::move(from);
  }

  inline ReportMessage& operator=(const ReportMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportMessage& operator=(ReportMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReportMessage& default_instance();

  static inline const ReportMessage* internal_default_instance() {
    return reinterpret_cast<const ReportMessage*>(
               &_ReportMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReportMessage& a, ReportMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReportMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReportMessage* New() const final {
    return CreateMaybeMessage<ReportMessage>(nullptr);
  }

  ReportMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReportMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReportMessage& from);
  void MergeFrom(const ReportMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.ReportMessage";
  }
  protected:
  explicit ReportMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ReportMessage_ReportMessageType ReportMessageType;
  static constexpr ReportMessageType Informational =
    ReportMessage_ReportMessageType_Informational;
  static constexpr ReportMessageType Vulnerability =
    ReportMessage_ReportMessageType_Vulnerability;
  static inline bool ReportMessageType_IsValid(int value) {
    return ReportMessage_ReportMessageType_IsValid(value);
  }
  static constexpr ReportMessageType ReportMessageType_MIN =
    ReportMessage_ReportMessageType_ReportMessageType_MIN;
  static constexpr ReportMessageType ReportMessageType_MAX =
    ReportMessage_ReportMessageType_ReportMessageType_MAX;
  static constexpr int ReportMessageType_ARRAYSIZE =
    ReportMessage_ReportMessageType_ReportMessageType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ReportMessageType_descriptor() {
    return ReportMessage_ReportMessageType_descriptor();
  }
  template<typename T>
  static inline const std::string& ReportMessageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ReportMessageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ReportMessageType_Name.");
    return ReportMessage_ReportMessageType_Name(enum_t_value);
  }
  static inline bool ReportMessageType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ReportMessageType* value) {
    return ReportMessage_ReportMessageType_Parse(name, value);
  }

  typedef ReportMessage_Confidence Confidence;
  static constexpr Confidence Low =
    ReportMessage_Confidence_Low;
  static constexpr Confidence Medium =
    ReportMessage_Confidence_Medium;
  static constexpr Confidence High =
    ReportMessage_Confidence_High;
  static constexpr Confidence Certain =
    ReportMessage_Confidence_Certain;
  static inline bool Confidence_IsValid(int value) {
    return ReportMessage_Confidence_IsValid(value);
  }
  static constexpr Confidence Confidence_MIN =
    ReportMessage_Confidence_Confidence_MIN;
  static constexpr Confidence Confidence_MAX =
    ReportMessage_Confidence_Confidence_MAX;
  static constexpr int Confidence_ARRAYSIZE =
    ReportMessage_Confidence_Confidence_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Confidence_descriptor() {
    return ReportMessage_Confidence_descriptor();
  }
  template<typename T>
  static inline const std::string& Confidence_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Confidence>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Confidence_Name.");
    return ReportMessage_Confidence_Name(enum_t_value);
  }
  static inline bool Confidence_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Confidence* value) {
    return ReportMessage_Confidence_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 3,
    kReportMessageTypeFieldNumber = 1,
    kConfidenceFieldNumber = 2,
  };
  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .message.ReportMessage.ReportMessageType reportMessageType = 1;
  void clear_reportmessagetype();
  ::message::ReportMessage_ReportMessageType reportmessagetype() const;
  void set_reportmessagetype(::message::ReportMessage_ReportMessageType value);
  private:
  ::message::ReportMessage_ReportMessageType _internal_reportmessagetype() const;
  void _internal_set_reportmessagetype(::message::ReportMessage_ReportMessageType value);
  public:

  // .message.ReportMessage.Confidence confidence = 2;
  void clear_confidence();
  ::message::ReportMessage_Confidence confidence() const;
  void set_confidence(::message::ReportMessage_Confidence value);
  private:
  ::message::ReportMessage_Confidence _internal_confidence() const;
  void _internal_set_confidence(::message::ReportMessage_Confidence value);
  public:

  // @@protoc_insertion_point(class_scope:message.ReportMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  int reportmessagetype_;
  int confidence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReportMessage

// .message.ReportMessage.ReportMessageType reportMessageType = 1;
inline void ReportMessage::clear_reportmessagetype() {
  reportmessagetype_ = 0;
}
inline ::message::ReportMessage_ReportMessageType ReportMessage::_internal_reportmessagetype() const {
  return static_cast< ::message::ReportMessage_ReportMessageType >(reportmessagetype_);
}
inline ::message::ReportMessage_ReportMessageType ReportMessage::reportmessagetype() const {
  // @@protoc_insertion_point(field_get:message.ReportMessage.reportMessageType)
  return _internal_reportmessagetype();
}
inline void ReportMessage::_internal_set_reportmessagetype(::message::ReportMessage_ReportMessageType value) {
  
  reportmessagetype_ = value;
}
inline void ReportMessage::set_reportmessagetype(::message::ReportMessage_ReportMessageType value) {
  _internal_set_reportmessagetype(value);
  // @@protoc_insertion_point(field_set:message.ReportMessage.reportMessageType)
}

// .message.ReportMessage.Confidence confidence = 2;
inline void ReportMessage::clear_confidence() {
  confidence_ = 0;
}
inline ::message::ReportMessage_Confidence ReportMessage::_internal_confidence() const {
  return static_cast< ::message::ReportMessage_Confidence >(confidence_);
}
inline ::message::ReportMessage_Confidence ReportMessage::confidence() const {
  // @@protoc_insertion_point(field_get:message.ReportMessage.confidence)
  return _internal_confidence();
}
inline void ReportMessage::_internal_set_confidence(::message::ReportMessage_Confidence value) {
  
  confidence_ = value;
}
inline void ReportMessage::set_confidence(::message::ReportMessage_Confidence value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:message.ReportMessage.confidence)
}

// string description = 3;
inline void ReportMessage::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& ReportMessage::description() const {
  // @@protoc_insertion_point(field_get:message.ReportMessage.description)
  return _internal_description();
}
inline void ReportMessage::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:message.ReportMessage.description)
}
inline std::string* ReportMessage::mutable_description() {
  // @@protoc_insertion_point(field_mutable:message.ReportMessage.description)
  return _internal_mutable_description();
}
inline const std::string& ReportMessage::_internal_description() const {
  return description_.Get();
}
inline void ReportMessage::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReportMessage::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:message.ReportMessage.description)
}
inline void ReportMessage::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:message.ReportMessage.description)
}
inline void ReportMessage::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:message.ReportMessage.description)
}
inline std::string* ReportMessage::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReportMessage::release_description() {
  // @@protoc_insertion_point(field_release:message.ReportMessage.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReportMessage::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:message.ReportMessage.description)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace message

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::message::ReportMessage_ReportMessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::ReportMessage_ReportMessageType>() {
  return ::message::ReportMessage_ReportMessageType_descriptor();
}
template <> struct is_proto_enum< ::message::ReportMessage_Confidence> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message::ReportMessage_Confidence>() {
  return ::message::ReportMessage_Confidence_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
