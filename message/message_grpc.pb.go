// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package message

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReportMessageServiceClient is the client API for ReportMessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReportMessageServiceClient interface {
	// Sends a greeting
	SendReportMessage(ctx context.Context, in *ReportMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type reportMessageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReportMessageServiceClient(cc grpc.ClientConnInterface) ReportMessageServiceClient {
	return &reportMessageServiceClient{cc}
}

func (c *reportMessageServiceClient) SendReportMessage(ctx context.Context, in *ReportMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/message.ReportMessageService/SendReportMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportMessageServiceServer is the server API for ReportMessageService service.
// All implementations must embed UnimplementedReportMessageServiceServer
// for forward compatibility
type ReportMessageServiceServer interface {
	// Sends a greeting
	SendReportMessage(context.Context, *ReportMessage) (*emptypb.Empty, error)
	mustEmbedUnimplementedReportMessageServiceServer()
}

// UnimplementedReportMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReportMessageServiceServer struct {
}

func (UnimplementedReportMessageServiceServer) SendReportMessage(context.Context, *ReportMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendReportMessage not implemented")
}
func (UnimplementedReportMessageServiceServer) mustEmbedUnimplementedReportMessageServiceServer() {}

// UnsafeReportMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReportMessageServiceServer will
// result in compilation errors.
type UnsafeReportMessageServiceServer interface {
	mustEmbedUnimplementedReportMessageServiceServer()
}

func RegisterReportMessageServiceServer(s grpc.ServiceRegistrar, srv ReportMessageServiceServer) {
	s.RegisterService(&ReportMessageService_ServiceDesc, srv)
}

func _ReportMessageService_SendReportMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportMessageServiceServer).SendReportMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.ReportMessageService/SendReportMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportMessageServiceServer).SendReportMessage(ctx, req.(*ReportMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// ReportMessageService_ServiceDesc is the grpc.ServiceDesc for ReportMessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReportMessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "message.ReportMessageService",
	HandlerType: (*ReportMessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendReportMessage",
			Handler:    _ReportMessageService_SendReportMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}
